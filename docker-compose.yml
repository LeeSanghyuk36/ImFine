version: '3'

services:

  fastapi:
    container_name: fastapi  # 컨테이너 이름을 지정합니다.
    build:
      context: /workspace/test-pipeline/finetune-back
      dockerfile: Dockerfile  # Dockerfile의 경로를 지정합니다. 현재 디렉토리에 있다면 이렇게 지정하면 됩니다.    
    ports: 
      - "8000:80"    
    image: fastapi
  
  nginx:
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    image: nginx:latest
    volumes: 
<<<<<<< HEAD
      - /workspace/test-pipeline/conf/nginx/conf.d:/etc/nginx/conf.d
      - /workspace/test-pipeline/conf/nginx/conf.d:/etc/nginx/ssl
      - /workspace/test-pipeline/conf/nginx/conf.d:/var/www/certbot
=======
#      - /home/ubuntu/jenkins/workspace/test-pipeline/conf/nginx/conf.d:/etc/nginx/conf.d
      - /home/ubuntu/jenkins/workspace/test-pipeline/conf/certbot/conf:/etc/nginx/ssl
      - /home/ubuntu/jenkins/workspace/test-pipeline/conf/certbot/data:/var/www/certbot
>>>>>>> ec2aa5018f6fb169d1bcd975de582c30c8aa5099

  certbot:
    container_name: certbot
    image: certbot/certbot:latest
    command: certonly --webroot --webroot-path=/var/www/certbot --email leehyunk6310@naver.com --agree-tos --no-eff-email -d k9d109.p.ssafy.io
    volumes:
        - /workspace/test-pipeline/conf/certbot/conf:/etc/letsencrypt
        - /workspace/test-pipeline/conf/certbot/logs:/var/log/letsencrypt
        - /workspace/test-pipeline/conf/certbot/data:/var/www/certbot
   
  reactapp:
    container_name: reactapp2  # 컨테이너 이름을 지정합니다.
    build:
      context: /workspace/test-pipeline/finetune-web
      dockerfile: Dockerfile  # Dockerfile의 경로를 지정합니다. 현재 디렉토리에 있다면 이렇게 지정하면 됩니다.    
    ports: 
      - "3000:3000"    
    image: reactapp