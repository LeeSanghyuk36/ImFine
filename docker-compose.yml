version: '3'

services:

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq    
    ports:
      - "5672:5672"
      - "15672:15672"
  
  celery:
    container_name: celery  # 컨테이너 이름을 지정합니다.
    build: 
      context: ./finetune-back
      dockerfile: celery_dockerfile  # Dockerfile의 경로를 지정합니다. 현재 디렉토리에 있다면 이렇게 지정하면 됩니다. 
    depends_on:
      - rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672
    restart: always
    
  fastapi:
    container_name: fastapi  # 컨테이너 이름을 지정합니다.
    build:
      context: ./finetune-back
      dockerfile: fast_dockerfile  # Dockerfile의 경로를 지정합니다. 현재 디렉토리에 있다면 이렇게 지정하면 됩니다.        
    ports: 
      - "8000:80"    
    image: fastapi
    depends_on:
      - rabbitmq  # FastAPI 애플리케이션이 RabbitMQ 서비스에 의존함을 명시
      - mysql
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672
    restart: always

  flower:
    container_name: flower  # 컨테이너 이름을 지정합니다.
    image: mher/flower  # Flower 이미지 사용
    command: celery --broker=amqp://guest:guest@rabbitmq:5672 flower --port=5555
    ports:
      - "5555:5555"  # Flower의 웹 인터페이스를 호스트의 5555 포트에 매핑
    depends_on:
      - rabbitmq 
    restart: always
  
  mysql:
    container_name: mysql
    image: mysql:8.2.0
    ports: 
      - 3307:3306
    environment:
      MYSQL_ROOT_PASSWORD: admin
    volumes:
      - ./mysql/initdb:/docker-entrypoint-initdb.d # 초기화 스크립트 디렉토리

  nginx:
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    image: nginx:latest
    volumes: 
      - /home/ubuntu/jenkins/workspace/test-pipeline/conf/nginx/conf.d:/etc/nginx/conf.d
      - /home/ubuntu/jenkins/workspace/test-pipeline/conf/certbot/conf:/etc/nginx/ssl
      - /home/ubuntu/jenkins/workspace/test-pipeline/conf/certbot/data:/var/www/certbot
    depends_on:
      - fastapi 
      - reactapp

  certbot:
    container_name: certbot
    image: certbot/certbot:latest
    command: certonly --webroot --webroot-path=/var/www/certbot --email leehyunk6310@naver.com --agree-tos --no-eff-email -d k9d109.p.ssafy.io
    volumes:
      - /home/ubuntu/jenkins/workspace/test-pipeline/conf/certbot/conf:/etc/letsencrypt
      - /home/ubuntu/jenkins/workspace/test-pipeline/conf/certbot/logs:/var/log/letsencrypt
      - /home/ubuntu/jenkins/workspace/test-pipeline/conf/certbot/data:/var/www/certbot

  reactapp:
    container_name: reactapp2  # 컨테이너 이름을 지정합니다.
    build:
      context: ./finetune-web
      dockerfile: Dockerfile  # Dockerfile의 경로를 지정합니다. 현재 디렉토리에 있다면 이렇게 지정하면 됩니다.    
    ports: 
      - "3000:3000"    
    image: reactapp